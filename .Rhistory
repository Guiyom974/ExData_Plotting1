names(vect2) <- c("foo", "bar", "norf")
?identical
identical(x = vect, y = vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(data = 1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data<- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!= 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
exit
close
?
exit
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
swirl()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flag_shapes, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
?table
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
iris
tapply(iris$sepal.length, iris$Species, mean)
sapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
?with
summary(mtcars)
with(mtcars, tapply(hp, cyl, mean))
209.21429 -  82.63636
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(x)
makeVector(c(10, 12, 34))
x <- c(10, 12, 23)
makeVector(x)
?makevector
makevector(set)
makeVector(12)
myvector <- makeVector(1:15)
myvector
myVector$get()
myvector$set()
myvector$set(10)
myvector
myvector$x
myvector$y
myvector$get()
x
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinvert <- function(invert) m <<- invert
getinvert <- function() m
list(set = set, get = get,
setinvert = setinvert,
getinvert = getinvert)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinvert()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinvert(m)
m
}
testmatrix <- matrix(1:9, 3, 3)
testmatrix
solve(testmatrix)
?solve(a = )
testmatrix <- matrix(c(2/3, -1/3, 1/3, 1/3), 2, 2)
testmatrix
testmatrix <- matrix(c(2/3, 1/3, -1/3, 1/3), 2, 2)
testmatrix
solve(testmatrix)
?rnorm
?Random
testmatrix <- matrix(rnorm(9, min=1, max=10), 3, 3)
testmatrix <- matrix(rnorm(9), 3, 3)
testmatrix
solve(testmatrix)
testmatrix
setinvert = setinvert,
getinvert = getinvert)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinvert <- function(invert) m <<- invert
getinvert <- function() m
list(set = set, get = get,
setinvert = setinvert,
getinvert = getinvert)
}
newMatrix <- makeCacheMatrix(testmatrix)
newMatrix$get()
newMatrix
testmatrix
newMatrix$get()
cacheSolve <- function(x, ...) {
m <- x$getinvert()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinvert(m)
m
}
cacheSolve(newMatrix)
m
cacheSolve
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createdFile("example.h5")
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
set.seed(13435)
x <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
X <- X[sample(1:5),];X$var2[c(1:3)]=NA
x <- x[sample(1:5),];x$var2[c(1:3)]=NA
x
X[, 1]
x[, 1]
x$var1
x[1:2, "var2"]
X[x$var1 <= 3 & x$var3 > 11, ]
x[x$var1 <= 3 & x$var3 > 11, ]
x[x$var1 <= 3 | x$var3 > 15, ]
x[which(x$var2>8), ]
x
sort(x$var1)
x[order(x$var1), ]
x[order(x$var2, na.last = TRUE), ]
x[order(x$var1, x$var2), ]
library(dplyr)
arrange(x, var1)
arrange(x, desc(var1))
x$var4 <- rnorm(5)
x
rbind(x, rnorm(5))
cbind(x, rnorm(5))
head(x, 2)
quantile(x$var2.na.rm = TRUE)
quantile(x$var2,na.rm = TRUE)
table(x$var1, x$var2)
sum(is.na(x$var1))
sum(is.na(x$var2))
x
any(is.na(x$var1))
any(is.na(x$var2))
colSums(is.na(x))
table(x$var1 %in% 3)
table(x$var1 %in% c(3, 5))
x[x$var1 %in% c(3, 5)]
ftable(x)
object.size(x)
print(object.size(x), units=Mb)
print(object.size(x), units="Mb")
print(object.size(x), units="Kb")
swirl()
library(swirl)
swirl()
reset()
swirl()
reset()
swirl()
mydf <- read.csv(path2csv, stringsAcFactors = FALSE)
mydf <- read.csv(path2csv, stringsAcFactors = FALSE)
?read.csv
path2csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(-(X:size)
)
cran(-(X:size))
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, packqge =="swirl")
filter(cran, package =="swirl")
filter(cran, r_version == "3.1.1", country =="US")
?Comparison
filter(cran, r_version <= "3.0.2", country =="IN")
filter(cran, country =="US"| country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, N1, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
desc(ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, c(ip_id, package, size))
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2/10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, size-1000)
mutate(cran3, correct_size = size-1000)
mutate(cran3, correct_size = size+1000)
summarize(cran, avh_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New york City")
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set = "n")
plot(airquality$Wind, type="n",airquality$Ozone)
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, month = 5)
may <- subset(airquality, Month == 5)
points(may$Wind, may$Ozone, col = "blue", type = 3)
points(may$Wind, may$Ozone, col = "blue")
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = "red", pch=2)
points(notmay$Wind, notmay$Ozone, col = "red", pch=8)
legend("topright", pch = c(17, 8), c("blue", "red"), c("May", "Other Months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months")
)
line(v = airquality$Wind, lty = 2-
)
line(v = airquality$Wind, lty = 2)
line(v = median(airquality$Wind), lty = 2)
abline(v = median(airquality$Wind), lty = 2)
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1, 2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City")
mtext("Ozone and Weather in New York City", outer = TRUE)
setwd("/Users/Guiyom/Google Drive/03 Projets/03 Courses/JH - Data Science/GitHubs/ExData_Plotting1")
getwd
getwd()
ls
cls
clear
getwd()
library(data.table)
## Download and unzip the dataset:
file <- "2Fhousehold_power_consumption.zip"
if (!file.exists(file)){
fileURL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(fileURL, file, method="curl")
}
if (!file.exists("PowerConsumptionData")) {
unzip(file)
}
library(data.table)
## Download and unzip the dataset:
file <- "2Fhousehold_power_consumption.zip"
if (!file.exists(file)){
fileURL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(fileURL, file, method="curl")
}
if (!file.exists("household_power_consumption.txt")) {
unzip(file)
}
## Load data
dataFile <- "./household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
## Subsets data
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
##Converts to numeric
globalActivePower <- as.numeric(subSetData$Global_active_power)
## Creates png picture
png("plot1.png", width=480, height=480)
## Generates histogram and saves it in picture
hist(globalActivePower, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
library(data.table)
## Download and unzip the dataset:
file <- "2Fhousehold_power_consumption.zip"
if (!file.exists(file)){
fileURL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(fileURL, file, method="curl")
}
if (!file.exists("household_power_consumption.txt")) {
unzip(file)
}
## Load data
dataFile <- "./household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
## Converts to date format
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
##Converts to numeric
globalActivePower <- as.numeric(subSetData$Global_active_power)
## Creates png picture
png("plot2.png", width=480, height=480)
## Generates histogram and saves it in picture
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
library(data.table)
## Download and unzip the dataset:
file <- "2Fhousehold_power_consumption.zip"
if (!file.exists(file)){
fileURL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(fileURL, file, method="curl")
}
if (!file.exists("household_power_consumption.txt")) {
unzip(file)
}
## Load data
dataFile <- "./household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
## Converts to date format
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
##Converts to numeric and create sub values
globalActivePower <- as.numeric(subSetData$Global_active_power)
## Create submetering subsets
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
## Creates png picture
png("plot3.png", width=480, height=480)
## Generates graphic
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
library(data.table)
## Download and unzip the dataset:
file <- "2Fhousehold_power_consumption.zip"
if (!file.exists(file)){
fileURL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(fileURL, file, method="curl")
}
if (!file.exists("household_power_consumption.txt")) {
unzip(file)
}
## Load data
dataFile <- "./household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
## Converts to date format
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
##Converts to numeric and create sub values
globalActivePower <- as.numeric(subSetData$Global_active_power)
globalReactivePower <- as.numeric(subSetData$Global_reactive_power)
voltage <- as.numeric(subSetData$Voltage)
## Create submetering subsets
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
## Creates png picture
png("plot4.png", width=480, height=480)
## Sets mode for 4 x 4 graph
par(mfrow = c(2, 2))
## Generates graphic 1
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power", cex=0.2)
## Generates graphic 2
plot(datetime, voltage, type="l", xlab="datetime", ylab="Voltage")
## Generates graphic 3
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
## Generates graphic 4
plot(datetime, globalReactivePower, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
